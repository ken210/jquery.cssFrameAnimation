/*
 * Copyright (C) 2011 Ken Rosaka
 * All rights reserved.
 * 
 * jquery.cssFrameAnimation - A jQuery plugin to emulate a timeline base animation using css classes
 * 
 * Author: Ken Rosaka (ken210.com / @ken_rosaka)
 * Version: 0.4 alpha
 * Created: 2011-04-29
 * Release: 2011-05-09
 * Last update: 2011-05-10 
 * License: http://www.gnu.org/licenses/gpl.html
 * 
 * Updates, examples and usage: http://github.com/ken210/jquery.cssFrameAnimation
 */

(function($){
	
$.fn.cssFrameAnimation = function(options) {
	
	var defaults = {

		fps : 40,
		
		// default to hover animation
		animationEvent : 'hover',
		
		// direction of the animation, default to normal (first frames first)
		ascending : true,
		
		// callback function defaults to none
		complete : undefined
		
	};
	
	// merge defaults with options
	$.extend(defaults, options);
	
	return this.each(function() {
		
		var element = this,
		
			elemClasses = this.className, // backup default element classes
		
			totalFrames = parseInt($(this).data('frames'), 10) || 1, // from data-frames attribute on element
			
			currentFrame = (defaults.ascending) ? 1 : totalFrames, // depends on direction of animation
			
			stop = function() {
				
				// erase animation classes
				$(element).removeClass().addClass(elemClasses);
				
				// callback function
				($.isFunction(defaults.complete) && defaults.ascending) && defaults.complete.call(this);

			},
			
			play = function(event) {
				
				currentFrame += event.data.ascending && currentFrame < totalFrames ? 1 : (!event.data.ascending && currentFrame > 1 ? -1 : 0);

				if (currentFrame == 1 || currentFrame == totalFrames) {
					stop();
					return false;
				}
				// concatenate the old classes plus the new classes
				var classToSet = elemClasses + ' ' + defaults.animationEvent + currentFrame;

				// reset animation classes
				$(element).removeClass().addClass(classToSet);
				
				// recursive fn
				setTimeout(play, 1000 / defaults.fps, event);
	
			},
			
			// self-executable init function
			init = (function() {
				
				// if is a hover animation we have 2 listeners: mouseover and mouseout
				defaults.animationEvent == 'hover' ? $(element).bind('mouseover', {ascending: defaults.ascending}, play).bind('mouseout', {ascending: !defaults.ascending}, play) : $(element).bind(defaults.animationEvent, {ascending: defaults.ascending}, play);
				
			})();
		
	});
	
};
	
})(jQuery);